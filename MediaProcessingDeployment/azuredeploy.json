{
  "parameters": {
    "functionAppName": {
      "type": "string"
    },
    "functionAppStorage": {
      "type": "string"
    },
    "location": {
      "type": "string"
    },
    "subscriptionId": {
      "type": "string"
    },
    "mediaAccountName": {
      "type": "string"
    },
    "mediaStorage": {
      "type": "string",
      "metadata": {
        "description": "Name of storage account for hosting media assets."
      }
    },
    "sourceCodeRepositoryURL": {
      "type": "string",
      "defaultValue": "Enter path to your sourcecode repository",
      "metadata": {
        "description": "Please enter your Source Code epository URL."
      }
    },
    "sourceCodeBranch": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "Sourcecode Repo branch. This should be set to Master for the public sample. You can adjust this to point to your own fork branch as recommended"
      }
    },
    "functionKey": {
      "type": "string",
      "metadata": {
        "description": "Function App Key to use for authorization of Webhook. You should replace this with the key you want to use for your Function application authorization"
      }
    },
    "logicAppApiVersion": {
      "type": "string"
    },
    "workflowName": {
      "type": "string"
    },
    "workflowSchema": {
      "type": "string"
    },
    "logicAppState": {
      "type": "string",
      "defaultValue": "Enabled"
    },
    "definition": {
      "type": "object",
      "defaultValue": {
        "contentVersion": "1.0.0.0",
        "parameters": {},
        "actions": {},
        "triggers": {},
        "outputs": {},
        "$schema": "[parameters('workflowSchema')]"
      }
    },
    "parameters": {
      "type": "object",
      "defaultValue": {}
    }
  },
  "variables": {
    "storageAccountid": "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionAppStorage'))]"
  },
  "resources": [
    {
      "name": "[parameters('functionAppName')]",
      "type": "Microsoft.Web/sites",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionAppStorage'))]",
        "[resourceId('microsoft.insights/components/', parameters('functionAppName'))]"
      ],
      "properties": {
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('functionAppStorage'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('functionAppStorage')), '2015-05-01-preview').key1)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('functionAppStorage'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('functionAppStorage')), '2015-05-01-preview').key1)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~1"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('functionAppStorage'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('functionAppStorage')), '2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[concat(toLower(parameters('functionAppName')), '85a6')]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "6.5.0"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('microsoft.insights/components/', parameters('functionAppName')), '2015-05-01').InstrumentationKey]"
            }
          ]
        },
        "resources": [
          {
            "type": "sourcecontrols",
            "name": "web",
            "apiVersion": "2015-08-01",
            "comments": "This section sets up source control for continuous integration on the Function app and pulls the source code down from Github.",
            "dependsOn": [
              "[resourceId('Microsoft.Web/sites/', parameters('functionAppName'))]",
              "[concat(resourceId('Microsoft.Web/sites/', parameters('functionAppName')),'/config/appsettings')]"
            ],
            "properties": {
              "RepoUrl": "[parameters('sourceCodeRepositoryURL')]",
              "branch": "[parameters('sourceCodeBranch')]",
              "IsManualIntegration": "false"
            }
          },
          {
            "type": "config",
            "name": "appsettings",
            "apiVersion": "2015-08-01",
            "comments": "These are the default appsettings configured on the functions app.",
            "dependsOn": [
              "[resourceId('Microsoft.Web/Sites', parameters('functionAppName'))]",
              "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionAppStorage'))]",
              "[resourceId('Microsoft.Storage/storageAccounts', parameters('mediaStorage'))]",
              "[resourceId('Microsoft.Media/mediaServices', parameters('mediaAccountName'))]"
            ],
            "properties": {
              "FUNCTIONS_EXTENSION_VERSION": "~1",
              "WEBSITE_NODE_DEFAULT_VERSION": "6.5.0",
              "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('functionAppStorage'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]",
              "WEBSITE_CONTENTSHARE": "[parameters('functionAppName')]",
              "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('functionAppStorage'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]",
              "AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('functionAppStorage'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]",
              "AMSAccount": "[parameters('mediaAccountName')]",
              "AMSKey": "[listKeys(parameters('mediaAccountName'),'2015-10-01').primaryKey]",
              "MediaServicesStorageAccountName": "[parameters('mediaStorage')]",
              "MediaServicesStorageAccountKey": "[listKeys(variables('storageAccountid'),'2015-05-01-preview').key1]",
              "StorageConnection": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('functionAppStorage'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]",
              "InputMediaContainer": "media-to-process",
              "SigningKey": "wOlDEUJ4/VN1No8HxVxpsRvej0DZrO5DXvImGLjFhfctPGFiMkUA0Cj8HSfJW7lePX9XsfHAMhw30p0yYqG+1A==",
              "WebHookEndpoint": "[concat(resourceId('Microsoft.Web/sites', parameters('functionAppName')),'/api/Notification_Webhook_Function?code=', parameters('functionKey'))]"
            }
          }
        ],

        "name": "[parameters('functionAppName')]",
        "clientAffinityEnabled": false
      },
      "apiVersion": "2016-03-01",
      "location": "[parameters('location')]",
      "kind": "functionapp"
    },




    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('functionAppStorage')]",
      "location": "[parameters('location')]",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[parameters('functionAppName')]",
      "type": "microsoft.insights/components",
      "location": "[parameters('location')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', parameters('functionAppName'))]": "Resource"
      },
      "properties": {
        "ApplicationId": "[parameters('functionAppName')]",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('mediaStorage')]",
      "apiVersion": "2016-01-01",
      "location": "[resourceGroup().location]",
      "comments": "This storage account is used to create the Media Services account.",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage"
    },

    {
      "type": "Microsoft.Media/mediaServices",
      "name": "[parameters('mediaAccountName')]",
      "apiVersion": "2015-10-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('mediaStorage'))]"
      ],
      "properties": {
        "storageAccounts": [
          {
            "id": "[resourceId('Microsoft.Storage/storageAccounts', parameters('mediaStorage'))]",
            "isPrimary": true
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('logicAppApiVersion')]",
      "name": "[parameters('workflowName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', parameters('functionAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionAppStorage'))]"
      ],
      "properties": {
        "definition": "[parameters('definition')]",
        "parameters": "[parameters('parameters')]",
        "state": "[parameters('logicAppState')]"
      }
    },

    {
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('workflowName')]",
      "apiVersion": "[parameters('logicAppApiVersion')]",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "When_one_or_more_blobs_are_added_or_modified_(metadata_only)": {
              "recurrence": {
                "frequency": "Second",
                "interval": 3
              },
              "splitOn": "@triggerBody()",
              "metadata": {
                "L21lZGlhLXRvLXByb2Nlc3M=": "/media-to-process"
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-northeurope.azure-apim.net/apim/azureblob"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/datasets/default/triggers/batch/onupdatedfile",
                "queries": {
                  "folderId": "L21lZGlhLXRvLXByb2Nlc3M=",
                  "maxFileCount": 10
                }
              }
            }
          },
          "actions": {
            "CreateMediaAsset": {
              "runAfter": {},
              "type": "Function",
              "inputs": {
                "body": {
                  "MediaType": "@triggerBody()?['MediaType']",
                  "Path": "@triggerBody()?['Path']",
                  "Size": "@triggerBody()?['Size']",
                  "assetName": "@triggerBody()?['Name']"
                },
                "function": {
                  "id": "[concat(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '/functions/CreateMediaAsset')]"
                }
              }
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "connectionId": "[parameters('workflows_hotmailmediaLogicApp_connectionId')]",
                "connectionName": "azureblob",
                "id": "/subscriptions/69109ecd-6e72-45f5-b6df-a4163666a224/providers/Microsoft.Web/locations/northeurope/managedApis/azureblob"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', parameters('functionAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "location": "[resourceGroup().location]",
      "name": "azureblob",
      "properties": {
        "api": {
          "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location,'/managedApis/azureblob')]"
        },
        "displayName": "azureblob",
        "parameterValues": {
          "accountName": "[parameters('mediaStorage')]",
          "accessKey": "[listKeys(variables('storageAccountid'),'2015-05-01-preview').key1]"
        }
      }
    }

  ],
  "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0"
}




